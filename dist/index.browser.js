!function(r,e){"object"==typeof exports&&"undefined"!=typeof module?module.exports=e():"function"==typeof define&&define.amd?define(e):(r="undefined"!=typeof globalThis?globalThis:r||self).Uniquener=e()}(this,(function(){"use strict";const r=new Set,e=(t={})=>{const n=t.includes,o=t.errorExit,i=t.onlyUpdate,a=t.errorListen,s=t.errorHandler,l=t.listenHandler||(r=>{}),c=!0===o||"function"!=typeof s;let d=t.radix||16,f=t.random||"?",h=t.format||null,u=t.tryCount||10;if(!0===i)try{return n instanceof Array&&n.forEach((e=>r.add(e))),n instanceof Set&&n.forEach((e=>r.add(e))),l(new Set(r)),""}catch{throw new Error("[Options.includes] is Not Iterative or [Options.listenHandler] is Call Error")}if([10,16,36].includes(d)||(d=16),["?","*","#"].includes(f)||(f="?"),String(h)!==h&&(h="????????-????-[1-5]???-[8-b]???-????????????",h=h.replace(/\?/g,f)),n instanceof Array)try{n.forEach((e=>r.add(e))),l(new Set(r))}catch{throw new Error("[Options.includes] is Not Iterative  or [Options.listenHandler] is Call Error")}if(n instanceof Set)try{n.forEach((e=>r.add(e))),l(new Set(r))}catch{throw new Error("[Options.includes] is Not Iterative or [Options.listenHandler] is Call Error")}let w="",p=!0,E=!1;const y=Array.from({length:36},((r,e)=>e.toString(36))),g=r.add.bind(r);for(;p&&u--;){if(w=[...h.replace(/\[([^\]]+?)\]/g,((r,e)=>{if("string"==typeof e){const r=new Set,t=r.add.bind(r),n=e.toLowerCase().split(/\s*,\s*|\s+/g).filter((r=>/^[a-zA-Z0-9\-*?#]+$/iu.test(r))),o=r=>/^[a-zA-Z0-9]-[a-zA-Z0-9]$/.test(r),i=n.reduce(((r,e)=>{if(o(e)){const r=e.split("-")[0],n=e.split("-")[1],o=y.indexOf(r),i=y.indexOf(n),a=Math.min(o,i),s=Math.max(o,i)+1;y.slice(a,s).forEach(t)}return o(e)||t(e),r}),r),a=Array.from(i).filter((r=>!!r));return a[Math.random()*a.length|0]||""}return r})).toLowerCase()].filter((r=>/^[a-zA-Z0-9\-*?#]+$/iu.test(r))).map((r=>r===f?y[Math.random()*d|0]:r)).join(""),!r.has(w))try{p=!1,g(w),l(new Set(r))}catch{throw new Error("[Options.listenHandler] is Call Error")}}if(p&&c){try{!0===a&&l(new Set(r))}catch{throw new Error("[Options.listenHandler] is Call Error")}throw new Error("[Uniquener.Cacher] Range Error")}if(p&&!c){try{const r=s(t),n={errorExit:!0};return E=!0,e({...t,...r,...n})}catch{}try{!0===a&&!E&&l(new Set(r))}catch{throw new Error("[Options.listenHandler] is Call Error")}throw new Error(E?"[Uniquener.Cacher] Range Error":"[Options.errorHandler] is Call Error")}return w};return e}));
